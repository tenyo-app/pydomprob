# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Branch

on:
  - push

jobs:
  pylint:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Pylint (python: ${{ matrix.python-version }})"
        run: make pylint

  black:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Black (python: ${{ matrix.python-version }})"
        run: make black-check

  mypy:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Mypy (python: ${{ matrix.python-version }})"
        run: make mypy

  unit-tests:
    runs-on: ubuntu-24.04
    needs:
      - pylint
      - black
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Unit test (python: ${{ matrix.python-version }})"
        run: make test-unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov

  functional-tests:
    runs-on: ubuntu-24.04
    needs:
      - pylint
      - black
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Functional test (python: ${{ matrix.python-version }})"
        run: make test-functional

  doc-tests:
    runs-on: ubuntu-24.04
    needs:
      - unit-tests
      - functional-tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Documentation test (python: ${{ matrix.python-version }})"
        run: make doctest

  build-docs-check:
    runs-on: ubuntu-24.04
    needs:
      - doc-tests

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5.1.0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: "Build documentation"
        run: make docs

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build/html

  deploy-docs:
    runs-on: ubuntu-24.04
    if: success() && (github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_name == 'master')
    needs:
      - build-docs-check
      - build-package

    steps:
      - uses: actions/checkout@v4

      - name: Sync Readthedocs versions
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
        run: |
          curl --fail -X POST -H "Authorization: Token ${READTHEDOCS_TOKEN}" https://readthedocs.org/api/v3/projects/domprob/sync-versions/ || exit 1

      - name: Determine VERSION environment variable
        run: |
            echo "Branch is '${{ github.ref_name }}'"
            if [[ ${{ github.ref_name }} == "develop" ]]; then
              VERSION=latest
            elif [[ ${{ github.ref_name }} == "main" || ${{ github.ref_name }} == "master" ]]; then
              VERSION=stable
            else
              VERSION=${{ github.ref_name }}
            fi
            echo "VERSION=${VERSION}"
            echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: "Trigger docs deployment"
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          response=$(curl --fail -X POST -H "Authorization: Token ${READTHEDOCS_TOKEN}" https://readthedocs.org/api/v3/projects/domprob/versions/${VERSION}/builds/) || exit 1
          build_id=$(echo "$response" | jq -r '.build.id') || exit 1
          echo "Build ID: $build_id"
          echo "build_id=$build_id" >> $GITHUB_ENV

      - name: "Wait for docs deployment to complete"
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          BUILD_ID: ${{ env.build_id }}
        run: |
          while true; do
            response=$(curl --fail -s -H "Authorization: Token $READTHEDOCS_TOKEN" https://readthedocs.org/api/v3/projects/domprob/builds/${BUILD_ID}/) || exit 1
            build_state=$(echo $response | jq -r '.state.code') || exit 1
            build_success=$(echo $response | jq -r '.success') || exit 1

            echo "Polling deployment state... $build_state"

            if [ "$build_state" == "finished" ]; then
              echo "Deployment success: $build_success"
              if [ "$build_success" == "true" ]; then
                echo "Read the Docs build completed successfully."
                break
              else
                echo "Read the Docs build failed."
                exit 1
              fi
            fi

            sleep 5
          done

  build-package:
    runs-on: ubuntu-24.04
    needs:
      - doc-tests

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5.1.0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: "Build package"
        run: uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
